{"version":3,"sources":["store/slices/commonSlice.ts","store/hooks.ts","store/slices/gameSlice.ts","pages/LoaderPage.tsx","components/error/Error.tsx","components/error/index.ts","App.tsx","store/index.ts","index.tsx"],"names":["commonSlice","createSlice","name","initialState","loader","errorMessage","reducers","state","action","payload","error","cleareError","selectError","createSelector","common","commonState","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","onGameInfoChange","createAsyncThunk","params","thunkApi","a","dispatch","setGameInfo","message","rejectWithValue","gameSlice","gameId","serverUrl","setVideoUrl","videoUrl","setActionKey","actionKey","key","actionType","type","selectGameInfo","game","gameState","selectionActionKey","useStyles","makeStyles","position","top","left","right","bottom","display","justifyContent","flexDirection","alignItems","LoaderPage","classes","className","alert","width","ErrorAlert","Alert","severity","onClose","AlertTitle","LoginPage","lazy","GamePage","App","fallback","path","component","to","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5b3c91b.chunk.js","sourcesContent":["import { createSlice, PayloadAction, createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nexport interface CommonState {\n    loader: boolean;\n    errorMessage: string | null;\n}\n\nlet initialState: CommonState = {\n    loader: true,\n    errorMessage: null,\n};\n\nconst commonSlice = createSlice({\n    name: 'common',\n    initialState,\n    reducers: {\n        loader(state, action: PayloadAction<boolean>) {\n            state.loader = action.payload;\n        },\n        error(state, action: PayloadAction<string | null>) {\n            state.errorMessage = action.payload;\n        },\n        cleareError(state, action: PayloadAction<void>) {\n            state.errorMessage = null;\n        },\n    },\n});\n\nexport const selectError = createSelector(\n    (state: RootState) => state.common,\n    (commonState: CommonState) => commonState.errorMessage,\n);\n\nexport const { loader, error, cleareError } = commonSlice.actions;\n\nexport default commonSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction, createSelector, createAsyncThunk } from '@reduxjs/toolkit';\nimport { KeyCode, KeyType } from '../../types/key';\nimport { RootState } from '../index';\nimport { error, loader } from './commonSlice';\n\nexport type GameStatus = 'error' | 'open' | 'close' | 'init';\n\nexport interface GameReducerType {\n    gameId?: number;\n    serverUrl?: string;\n    videoUrl?: string;\n    actionKey?: KeyCode;\n    actionType?: KeyType;\n}\n\nlet initialState: GameReducerType = {};\n\nexport const onGameInfoChange = createAsyncThunk<\n    string | void,\n    { gameId?: number; serverUrl?: string },\n    { rejectValue: string }\n>('game/infoChange', async (params, thunkApi) => {\n    try {\n        thunkApi.dispatch(loader(true));\n        thunkApi.dispatch(setGameInfo(params));\n    } catch (err) {\n        const errorMessage = err.message || 'Failed to update game info';\n        thunkApi.dispatch(error(errorMessage));\n        return thunkApi.rejectWithValue(errorMessage);\n    } finally {\n        thunkApi.dispatch(loader(false));\n    }\n});\n\nconst gameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        setGameInfo(state, action: PayloadAction<{ gameId?: number; serverUrl?: string }>) {\n            state.gameId = action.payload.gameId;\n            state.serverUrl = action.payload.serverUrl;\n        },\n        setVideoUrl(state, action: PayloadAction<string>) {\n            state.videoUrl = action.payload;\n        },\n        setActionKey(state, action: PayloadAction<{ key: KeyCode, type: KeyType } | undefined>) {\n            state.actionKey = action.payload?.key;\n            state.actionType = action.payload?.type;\n        },\n    },\n});\n\nexport const selectGameInfo = createSelector(\n    (state: RootState) => state.game,\n    (gameState: GameReducerType) => ({\n        gameId: gameState.gameId,\n        serverUrl: gameState.serverUrl,\n    }),\n);\n\nexport const selectVideoUrl = createSelector(\n    (state: RootState) => state.game,\n    (gameState: GameReducerType) => ({\n        videoUrl: gameState.videoUrl,\n    }),\n);\n\nexport const selectionActionKey = createSelector(\n    (state: RootState) => state.game,\n    (gameState: GameReducerType) => ({ actionKey: gameState.actionKey, actionType: gameState.actionType }),\n);\n\nexport const { setGameInfo, setVideoUrl, setActionKey } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    loader: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n});\n\nconst LoaderPage: React.FC<{}> = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.loader}>\n            <h1>Loading session info!</h1>\n            <p>Please wait....</p>\n        </div>\n    );\n};\n\nexport default LoaderPage;\n","import { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { selectError, cleareError } from '../../store/slices/commonSlice';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    alert: {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n    },\n});\n\nconst ErrorAlert: React.FC<{}> = () => {\n    const classes = useStyles();\n    const error = useAppSelector(selectError);\n    const dispatch = useAppDispatch();\n\n    return (\n        <>\n            {!!error && (\n                <Alert severity=\"error\" className={classes.alert} onClose={() => dispatch(cleareError())}>\n                    <AlertTitle>Error</AlertTitle>\n                    {error}\n                </Alert>\n            )}\n        </>\n    );\n};\n\nexport default ErrorAlert;\n","import ErrorAlert from \"./Error\";\n\nexport default ErrorAlert;","import { lazy, Suspense } from 'react';\n//Replace to browser router when app will be moved to root path\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport Loader from './pages/LoaderPage';\nimport ErrorAlert from './components/error';\n\nconst LoginPage = lazy(() => import('./pages/LoginPage'));\nconst GamePage = lazy(() => import('./pages/GamePage'));\n\nfunction App() {\n    return (\n        <Router>\n            <Suspense fallback={<Loader />}>\n                <ErrorAlert />\n                <Switch>\n                    <Route path=\"/game\" component={GamePage} />\n                    <Route path=\"/login\" component={LoginPage} />\n                    <Redirect to=\"/login\" />\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport commonSlice from './slices/commonSlice';\nimport gameSlice from './slices/gameSlice';\n\nexport const store = configureStore({\n    reducer: {\n        common: commonSlice,\n        game: gameSlice,\n    },\n    middleware: getDefaultMiddleware({ thunk: true }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}