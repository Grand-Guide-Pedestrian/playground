{"version":3,"sources":["components/overlay/Overlay.tsx","components/overlay/index.ts","components/player/index.ts","components/player/Player.tsx","components/controls/ControlKey.tsx","components/controls/Controls.tsx","components/controls/index.ts","pages/GamePage.tsx","hooks/useWebSokets.tsx"],"names":["useStyles","makeStyles","overlay","position","top","left","right","bottom","background","overflow","Overlay","zIndex","className","style","Player","videoNode","player","this","flvjs","createPlayer","type","isLive","url","hasAudio","hasVideo","enableStashBuffer","stashInitialSize","LoggingControl","enableError","enableWarn","attachMediaElement","load","play","on","err","console","log","destroy","controls","ref","node","height","width","React","Component","initActionEvent","document","createEvent","initEvent","endActionEvent","ControlKey","id","onClick","active","useRef","triggerOnClick","useCallback","setTimeout","useEffect","current","button","element","querySelector","dispatchEvent","triggerButtonAnimation","Button","keyCodes","keys","map","keyCode","Controls","onAction","dispatch","useAppDispatch","useAppSelector","selectionActionKey","actionKey","actionType","setActionKey","keyHandler","e","indexOf","key","window","addEventListener","removeEventListener","Game","selectGameInfo","serverUrl","gameId","useState","status","setStatus","server","serverEventListener","event","serverErrorListener","error","reason","WebSocket","close","onGameInfoChange","data","send","useWebSockets","history","useHistory","onKeyPress","toUpperCase","replace"],"mappings":"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","file":"static/js/5.4c2c818a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    overlay: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n\n        background: 'transparent',\n\n        overflow: 'hidden',\n    },\n});\n\nconst Overlay: React.FC<{ zIndex: number }> = ({ zIndex }) => (\n    <div className={useStyles().overlay} style={{ zIndex: zIndex }}></div>\n);\n\nexport default Overlay;\n","import Overlay from './Overlay';\n\nexport default Overlay;","import Player from './Player';\n\nexport default Player;","import React from 'react';\nimport Overlay from '../overlay';\nimport flvjs from 'flv.js';\n\nclass Player extends React.Component {\n  private videoNode!: HTMLVideoElement\n  private player!: flvjs.Player\n\n  componentDidMount() {\n    this.player = flvjs.createPlayer(\n      {\n        type: 'flv',\n        isLive: true,\n        url: 'http://18.192.37.20:8080/live/livestream.flv',\n        hasAudio: true,\n        hasVideo: true,\n      },\n      {\n        enableStashBuffer: true,\n        stashInitialSize: 128,\n      }\n    )\n\n    flvjs.LoggingControl.enableError = false;\n    flvjs.LoggingControl.enableWarn = true;\n\n    this.player.attachMediaElement(this.videoNode);\n    this.player.load();\n    this.player.play(); // REQUIRES BROWSER PERMISSION!!!\n    this.player.on('error', (err) => {\n      console.log(err);\n    });\n  }\n\n  // destroy player on unmount\n  componentWillUnmount() {\n    this.player.destroy();\n  }\n\n  render() {\n    return (\n      <>\n        <video\n          controls={true}\n          ref={node => this.videoNode = node!}\n          height='100%'\n          width='100%'\n          style={{width: '100vw', height: '100vh'}}\n        />\n        <Overlay zIndex={1} />\n      </>\n    );\n  }\n}\n\nexport default Player;\n","import React, { useEffect, useCallback, useRef } from 'react';\nimport { KeyCode } from '../../types/key';\nimport { OnActionType } from './Controls';\nimport Button from '@material-ui/core/Button';\n\n//Events to trigger button click animations programaticaly\nconst initActionEvent = document.createEvent('MouseEvents');\ninitActionEvent.initEvent('mousedown', true, false);\n\nconst endActionEvent = document.createEvent('MouseEvents');\nendActionEvent.initEvent('mouseup', true, false);\n\nconst triggerButtonAnimation = (button: HTMLButtonElement): void => {\n    const element = button.querySelector('.MuiButton-label');\n    element?.dispatchEvent(initActionEvent);\n    setTimeout(() => element?.dispatchEvent(endActionEvent), 500);\n};\n\nexport interface ControlKeyData {\n    id: KeyCode;\n}\n\nconst ControlKey: React.FC<{ id: KeyCode; onClick: OnActionType; active: boolean }> = ({ id, onClick, active }) => {\n    const ref = useRef<HTMLButtonElement>(null);\n\n    const triggerOnClick = useCallback(():void => {\n        onClick(id, 'keydown');\n        setTimeout(() => {\n            onClick(id, 'keyup')\n        }, 500);\n    }, [id, onClick]);\n\n    useEffect(() => {\n        if (ref.current && active) {\n            triggerButtonAnimation(ref.current);\n            triggerOnClick();\n        }\n    }, [active, triggerOnClick]);\n\n    return (\n        <Button id={id} className=\"controls__key\" onClick={triggerOnClick} ref={ref}>\n            {id}\n        </Button>\n    );\n};\n\nexport default ControlKey;\n","import { useCallback, useEffect } from 'react';\nimport ControlKey, { ControlKeyData } from './ControlKey';\n\nimport { KeyCode, KeyType } from '../../types/key';\n\nimport './Controls.css';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { selectionActionKey, setActionKey } from '../../store/slices/gameSlice';\n\nexport type OnActionType = (keyCode: KeyCode, type: KeyType) => void;\n\nconst keyCodes: KeyCode[] = ['q', 'w', 'e', 'a', 's', 'd'];\nconst keys: ControlKeyData[] = keyCodes.map((keyCode: KeyCode) => ({id: keyCode}));\n\nconst Controls: React.FC<{ onAction: OnActionType }> = ({ onAction }) => {\n    const dispatch = useAppDispatch();\n    const { actionKey, actionType } = useAppSelector(selectionActionKey);\n\n    const onClick = useCallback(\n        (keyCode: KeyCode, type: KeyType) => {\n            onAction(keyCode, type);\n            dispatch(setActionKey());\n        },\n        [onAction, dispatch],\n    );\n\n    const keyHandler = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyCodes.indexOf(e.key as KeyCode) !== -1) {\n                dispatch(setActionKey({ key: e.key as KeyCode, type: e.type as KeyType }));\n            } else {\n                return;\n            }\n        },\n        [dispatch],\n    );\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyHandler);\n\n        return () => {\n            window.removeEventListener('keydown', keyHandler);\n        };\n    }, [keyHandler]);\n\n    return (\n        <section className=\"controls\">\n            {keys.map((key) => (\n                <ControlKey key={key.id} id={key.id} onClick={onClick} active={key.id === actionKey && actionType === 'keydown'}/>\n            ))}\n        </section>\n    );\n};\n\nexport default Controls;\n","import Controls from './Controls';\n\nexport default Controls;\n","import Player from '../components/player';\nimport Controls from '../components/controls';\n\nimport { useWebSockets } from '../hooks/useWebSokets';\nimport { useCallback } from 'react';\nimport { OnActionType } from '../components/controls/Controls';\nimport { KeyCode, KeyType } from '../types/key';\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { onGameInfoChange, selectGameInfo } from '../store/slices/gameSlice';\n\nfunction Game() {\n    const { serverUrl, gameId } = useAppSelector(selectGameInfo);\n    const { status, onAction } = useWebSockets({ serverUrl, gameId });\n    const history = useHistory();\n    const dispatch = useAppDispatch();\n\n    const onKeyPress: OnActionType = useCallback(\n        (keyCode: KeyCode, type: KeyType) => {\n            onAction(`${keyCode.toUpperCase()}_${type === 'keyup' ? 'UP' : 'DOWN'}`);\n        },\n        [onAction],\n    );\n\n    useEffect(() => {\n        if (status === 'close' || status === 'error') {\n            dispatch(onGameInfoChange({}));\n            history.replace('/login');\n        }\n    }, [status, history, dispatch, gameId, serverUrl]);\n\n    return (\n        <div className=\"game\">\n            <Player />\n            <Controls onAction={onKeyPress} />\n        </div>\n    );\n}\n\nexport default Game;\n","import { useRef } from 'react';\nimport { useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useAppDispatch } from '../store/hooks';\nimport { error } from '../store/slices/commonSlice';\nimport { onGameInfoChange } from '../store/slices/gameSlice';\n\nconst url = (url: string, id: number) => `${url}/game/${id}/player`;\n\nexport type ServerEvent = 'message' | 'open' | 'close' | 'error';\nexport type Props = {\n    gameId?: number;\n    serverUrl?: string;\n};\n\nexport const useWebSockets = ({ serverUrl, gameId }: Props) => {\n    const [status, setStatus] = useState<ServerEvent | undefined>();\n    const server = useRef<WebSocket>();\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        const serverEventListener = (event: Event) => {\n            setStatus(event.type as ServerEvent);\n        };\n        const serverErrorListener = (event: CloseEvent) => {\n            dispatch(error(event.reason));\n            setStatus(event.type as ServerEvent);\n        };\n        if (!status && gameId && serverUrl) {\n            console.log(`Trying to establish connection with server with gameId ${gameId}`);\n            console.log('rerender websocket effect', server.current, status, gameId, serverUrl);\n            server.current = new WebSocket(url(serverUrl, gameId));\n            server.current.addEventListener('message', serverEventListener);\n            server.current.addEventListener('open', serverEventListener);\n            server.current.addEventListener('close', serverErrorListener);\n            server.current.addEventListener('error', serverEventListener);\n        }\n        return () => {\n            if (!!server.current && (status === 'error' || status === 'close')) {\n                console.log(`Closing connection with server`);\n                server.current.removeEventListener('message', serverEventListener);\n                server.current.removeEventListener('open', serverEventListener);\n                server.current.removeEventListener('error', serverEventListener);\n                server.current.removeEventListener('close', serverErrorListener);\n                server.current.close();\n                dispatch(onGameInfoChange({}));\n            }\n        };\n    }, [status, gameId, serverUrl, dispatch]);\n\n    useEffect(() => {\n        //close connection on component destroy\n        return () => server.current?.close();\n    }, []);\n\n    const onAction = useCallback(\n        (data: string) => {\n            if (!!server.current && status === 'open') {\n                server.current.send(data);\n            }\n        },\n        [status],\n    );\n\n    return { status, onAction };\n};\n"],"sourceRoot":""}